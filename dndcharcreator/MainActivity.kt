package edu.msudenver.dndcharcreator

import android.content.DialogInterface
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AlertDialog
import androidx.recyclerview.widget.RecyclerView

class MainActivity : AppCompatActivity(), View.OnLongClickListener {

    lateinit var recyclerView: RecyclerView
    lateinit var dbHelper: DBHelper

    private inner class CharacterHolder(view: View): RecyclerView.ViewHolder(view) {

        val txtId : TextView = view.findViewById(R.id.txtId) // autogenerated int
        val imgPane : ImageView = view.findViewById(R.id.imgPane) //
        val txtName : TextView = view.findViewById(R.id.txtName) // string
        val txtRace : TextView = view.findViewById(R.id.txtRace) // String
        val txtJobClass : TextView = view.findViewById(R.id.txtJobClass)
        val txtBackground : TextView = view.findViewById(R.id.txtBackground)

    }

    private inner class CharacterAdapter(var characters: List<Characters>, var onLongClickListener: View.OnLongClickListener): RecyclerView.Adapter<CharacterHolder>(){

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CharacterHolder {
            val view = LayoutInflater.from(parent.context).inflate(R.layout.character_list, parent, false)
            view.setOnLongClickListener(onLongClickListener)
            return CharacterHolder(view)
        }

        override fun onBindViewHolder(holder: CharacterHolder, position: Int) {
            val entry = characters[position]

            holder.txtId.text = entry.toString()
        }

        override fun getItemCount(): Int {
            return characters.size
        }
    }

    fun populateRecyclerView() {

        val db = dbHelper.readableDatabase
        val characters = mutableListOf<Characters>()


        /*db.execSQL(
            """
            DROP TABLE IF EXISTS characters
        """)
        dbHelper.onCreate(db)*/
        // To clear pesky tables!

        val cursor = db.query(
            "characters",
            arrayOf("rowid, date, level, value"),
            null,
            null,
            null,
            null,
            null
        )
        with (cursor) {
            while (moveToNext()) {


                val id = getInt(0)
                val date    = DBHelper.ISO_FORMAT.parse(getString(1))
                val level = getString(2).toString().toInt()
                val value = getString(3).toString().toDouble()

                val entry = Characters(id, date, level, value)
                characters.add(entry)
            }
        }
        //characters.sort()
        recyclerView.adapter = CharacterAdapter(characters, this)

    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        //dbHelper = DBHelper(this)

        //recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
        //recyclerView.layoutManager = LinearLayoutManager(this)

        populateRecyclerView()


        // TODOd #5: initialize the floating action button
        /*val fabCreate: FloatingActionButton = findViewById(R.id.fabCreate)
        fabCreate.setOnClickListener {

            val intent = Intent(this, GameActivity::class.java)
            //intent.putExtra("op", GameActivity.CREATE_OP)
            startActivity(intent)*/
    }

    override fun onResume() {
        super.onResume()
        populateRecyclerView()
    }

    override fun onLongClick(view: View?): Boolean {
        class MyDialogInterfaceListener(val id: Int): DialogInterface.OnClickListener {
            override fun onClick(dialogInterface: DialogInterface?, which: Int) {
                if (which == DialogInterface.BUTTON_POSITIVE) {
                    try {
                        val db = dbHelper.writableDatabase
                        db.execSQL(
                            """
                                DELETE FROM characters
                                WHERE rowid = "${id}"
                            """
                        )
                        onResume()

                    } catch (ex: Exception) {

                    }
                }
            }
        }

        if (view != null) {
            val id = view.findViewById<TextView>(R.id.txtId).text.toString().toInt()
            val alertDialogBuilder = AlertDialog.Builder(this)
            alertDialogBuilder.setMessage("Are you sure you want to delete this score?")
            alertDialogBuilder.setPositiveButton("Yes", MyDialogInterfaceListener(id))
            alertDialogBuilder.setNegativeButton("No", MyDialogInterfaceListener(id))
            alertDialogBuilder.show()
            return true
        }
        return false
    }
}